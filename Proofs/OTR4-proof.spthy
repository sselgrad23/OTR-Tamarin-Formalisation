theory OTR4 begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, pair/2, pk/1, sdec/2, senc/2, sign/2, snd/1,
           true/0, verify/3
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true



rule (modulo E) Register_key_pair:
   [ Fr( ~ltk ) ]
  -->
   [ !Ltk( $A, ~ltk ), !Pk( $A, pk(~ltk) ), Out( pk(~ltk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal_ltk:
   [ !Ltk( A, ltk ) ] --[ Reveal( A ) ]-> [ Out( ltk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_A:
   [ Fr( ~id ), !Ltk( A, ltkA ), !Pk( B, pkB ) ]
  --[ Create_A( A, ~id ) ]->
   [ St_A_1( A, ~id, ltkA, pkB, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_B:
   [ Fr( ~id ), !Ltk( B, ltkB ), !Pk( A, pkA ) ]
  --[ Create_B( B, ~id ) ]->
   [ St_B_1( B, ~id, ltkB, pkA, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) A_1_send:
   [ St_A_1( A, id, ltkA, pkB, B ), Fr( ~x ) ]
  --[ Send( A, 'g'^~x ) ]->
   [ St_A_2( A, id, ltkA, pkB, B, ~x ), Out( 'g'^~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_1_receive:
   [ St_B_1( B, id, ltkB, pkA, A ), In( gx ) ]
  --[ Recv( B, gx ) ]->
   [ St_B_2( B, id, ltkB, pkA, A, gx ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) B_2_send:
   [ St_B_2( B, id, ltkB, pkA, A, gx ), Fr( ~y ) ]
  --[ Send( B, 'g'^~y ), Running( B, A, <'I', 'R', h(gx^~y)> ) ]->
   [ St_B_3( B, id, ltkB, pkA, A, gx, ~y, h(gx^~y) ), Out( 'g'^~y ) ]

  /*
  rule (modulo AC) B_2_send:
     [ St_B_2( B, id, ltkB, pkA, A, gx ), Fr( ~y ) ]
    --[ Send( B, 'g'^~y ), Running( B, A, <'I', 'R', h(z)> ) ]->
     [ St_B_3( B, id, ltkB, pkA, A, gx, ~y, h(z) ), Out( 'g'^~y ) ]
    variants (modulo AC)
    1. ~y    = ~y.13
       gx    = gx.16
       z     = gx.16^~y.13
    
    2. ~y    = ~y.17
       gx    = z.24^inv(~y.17)
       z     = z.24
    
    3. ~y    = ~y.77
       gx    = x.151^x.152
       z     = x.151^(~y.77*x.152)
    
    4. ~y    = ~y.80
       gx    = x.157^inv((~y.80*x.158))
       z     = x.157^inv(x.158)
    
    5. ~y    = ~y.80
       gx    = x.157^(x.158*inv(~y.80))
       z     = x.157^x.158
    
    6. ~y    = ~y.81
       gx    = x.158^(x.159*inv((~y.81*x.160)))
       z     = x.158^(x.159*inv(x.160))
  */

rule (modulo E) A_2_receive:
   [ St_A_2( A, id, ltkA, pkB, B, x ), In( gy ) ]
  --[ Recv( A, gy ), Running( A, B, <'R', 'I', h(gy^x)> ) ]->
   [ St_A_3( A, id, ltkA, pkB, B, x, gy, h(gy^x) ) ]

  /*
  rule (modulo AC) A_2_receive:
     [ St_A_2( A, id, ltkA, pkB, B, x ), In( gy ) ]
    --[ Recv( A, gy ), Running( A, B, <'R', 'I', h(z)> ) ]->
     [ St_A_3( A, id, ltkA, pkB, B, x, gy, h(z) ) ]
    variants (modulo AC)
     1. gy    = gy.10
        x     = one
        z     = gy.10
    
     2. gy    = gy.14
        x     = x.18
        z     = gy.14^x.18
    
     3. gy    = x.12^(x.13*x.14)
        x     = inv(x.13)
        z     = x.12^x.14
    
     4. gy    = z.12^inv(x.11)
        x     = x.11
        z     = z.12
    
     5. gy    = x.13^(x.14*x.15*inv(x.16))
        x     = (x.16*inv(x.14))
        z     = x.13^x.15
    
     6. gy    = x.13^(x.14*inv((x.15*x.16)))
        x     = (x.15*inv(x.14))
        z     = x.13^inv(x.16)
    
     7. gy    = x.14^(x.15*x.16*inv((x.17*x.18)))
        x     = (x.17*inv(x.15))
        z     = x.14^(x.16*inv(x.18))
    
     8. gy    = z.14^x.19
        x     = inv(x.19)
        z     = z.14
    
     9. gy    = x.15^x.16
        x     = inv((x.16*x.20))
        z     = x.15^inv(x.20)
    
    10. gy    = x.15^x.16
        x     = (x.20*inv(x.16))
        z     = x.15^x.20
    
    11. gy    = x.15^inv(x.16)
        x     = inv(x.20)
        z     = x.15^inv((x.16*x.20))
    
    12. gy    = x.15^inv(x.16)
        x     = (x.16*x.20)
        z     = x.15^x.20
    
    13. gy    = z.15^(x.20*inv(x.21))
        x     = (x.21*inv(x.20))
        z     = z.15
    
    14. gy    = x.16^x.17
        x     = (x.21*inv((x.17*x.22)))
        z     = x.16^(x.21*inv(x.22))
    
    15. gy    = x.16^inv(x.17)
        x     = (x.21*inv(x.22))
        z     = x.16^(x.21*inv((x.17*x.22)))
    
    16. gy    = x.16^inv((x.17*x.18))
        x     = (x.17*x.22)
        z     = x.16^(x.22*inv(x.18))
    
    17. gy    = x.16^inv((x.17*x.18))
        x     = (x.17*inv(x.22))
        z     = x.16^inv((x.18*x.22))
    
    18. gy    = x.16^(x.17*x.18)
        x     = inv((x.17*x.22))
        z     = x.16^(x.18*inv(x.22))
    
    19. gy    = x.16^(x.17*x.18)
        x     = (x.22*inv(x.17))
        z     = x.16^(x.18*x.22)
    
    20. gy    = x.16^(x.17*inv(x.18))
        x     = inv(x.22)
        z     = x.16^(x.17*inv((x.18*x.22)))
    
    21. gy    = x.16^(x.17*inv(x.18))
        x     = inv((x.17*x.22))
        z     = x.16^inv((x.18*x.22))
    
    22. gy    = x.16^(x.17*inv(x.18))
        x     = (x.18*x.22)
        z     = x.16^(x.17*x.22)
    
    23. gy    = x.16^(x.17*inv(x.18))
        x     = (x.18*x.22*inv(x.17))
        z     = x.16^x.22
    
    24. gy    = x.16^(x.17*inv(x.18))
        x     = (x.18*inv((x.17*x.22)))
        z     = x.16^inv(x.22)
    
    25. gy    = x.17^inv((x.18*x.19))
        x     = (x.18*x.23*inv(x.24))
        z     = x.17^(x.23*inv((x.19*x.24)))
    
    26. gy    = x.17^(x.18*x.19)
        x     = (x.23*inv((x.18*x.24)))
        z     = x.17^(x.19*x.23*inv(x.24))
    
    27. gy    = x.17^(x.18*x.19*inv(x.20))
        x     = inv((x.18*x.24))
        z     = x.17^(x.19*inv((x.20*x.24)))
    
    28. gy    = x.17^(x.18*x.19*inv(x.20))
        x     = (x.20*x.24*inv(x.18))
        z     = x.17^(x.19*x.24)
    
    29. gy    = x.17^(x.18*x.19*inv(x.20))
        x     = (x.20*inv((x.18*x.24)))
        z     = x.17^(x.19*inv(x.24))
    
    30. gy    = x.17^(x.18*inv(x.19))
        x     = (x.19*x.23*inv((x.18*x.24)))
        z     = x.17^(x.23*inv(x.24))
    
    31. gy    = x.17^(x.18*inv(x.19))
        x     = (x.23*inv(x.24))
        z     = x.17^(x.18*x.23*inv((x.19*x.24)))
    
    32. gy    = x.17^(x.18*inv(x.19))
        x     = (x.23*inv((x.18*x.24)))
        z     = x.17^(x.23*inv((x.19*x.24)))
    
    33. gy    = x.17^(x.18*inv((x.19*x.20)))
        x     = (x.19*x.24)
        z     = x.17^(x.18*x.24*inv(x.20))
    
    34. gy    = x.17^(x.18*inv((x.19*x.20)))
        x     = (x.19*x.24*inv(x.18))
        z     = x.17^(x.24*inv(x.20))
    
    35. gy    = x.17^(x.18*inv((x.19*x.20)))
        x     = (x.19*inv(x.24))
        z     = x.17^(x.18*inv((x.20*x.24)))
    
    36. gy    = x.17^(x.18*inv((x.19*x.20)))
        x     = (x.19*inv((x.18*x.24)))
        z     = x.17^inv((x.20*x.24))
    
    37. gy    = x.18^(x.19*x.20*inv(x.21))
        x     = (x.21*x.25*inv((x.19*x.26)))
        z     = x.18^(x.20*x.25*inv(x.26))
    
    38. gy    = x.18^(x.19*x.20*inv(x.21))
        x     = (x.25*inv((x.19*x.26)))
        z     = x.18^(x.20*x.25*inv((x.21*x.26)))
    
    39. gy    = x.18^(x.19*x.20*inv((x.21*x.22)))
        x     = (x.21*x.26*inv(x.19))
        z     = x.18^(x.20*x.26*inv(x.22))
    
    40. gy    = x.18^(x.19*x.20*inv((x.21*x.22)))
        x     = (x.21*inv((x.19*x.26)))
        z     = x.18^(x.20*inv((x.22*x.26)))
    
    41. gy    = x.18^(x.19*inv((x.20*x.21)))
        x     = (x.20*x.25*inv(x.26))
        z     = x.18^(x.19*x.25*inv((x.21*x.26)))
    
    42. gy    = x.18^(x.19*inv((x.20*x.21)))
        x     = (x.20*x.25*inv((x.19*x.26)))
        z     = x.18^(x.25*inv((x.21*x.26)))
    
    43. gy    = x.19^(x.20*x.21*inv((x.22*x.23)))
        x     = (x.22*x.27*inv((x.20*x.28)))
        z     = x.19^(x.21*x.27*inv((x.23*x.28)))
    
    44. gy    = x.21^x.22
        x     = x.15
        z     = x.21^(x.15*x.22)
    
    45. gy    = x.21^(x.22*inv(x.15))
        x     = x.15
        z     = x.21^x.22
    
    46. gy    = x.22^inv((x.16*x.24))
        x     = x.16
        z     = x.22^inv(x.24)
    
    47. gy    = x.23^(x.24*inv((x.17*x.26)))
        x     = x.17
        z     = x.23^(x.24*inv(x.26))
  */

rule (modulo E) A_3_send:
   [ St_A_3( A, id, ltkA, pkB, B, x, gy, K_m ) ]
  --[
  Send( A,
        <A, sign(<gy, 'g'^x>, ltkA), senc(<'0', A>, K_m), pk(ltkA)>
  )
  ]->
   [
   St_A_4( A, id, ltkA, pkB, B, x, gy, K_m ),
   Out( <A, sign(<gy, 'g'^x>, ltkA), senc(<'0', A>, K_m), pk(ltkA)> )
   ]

  /*
  rule (modulo AC) A_3_send:
     [ St_A_3( A, id, ltkA, pkB, B, x, gy, K_m ) ]
    --[
    Send( A, <A, sign(<gy, z>, ltkA), senc(<'0', A>, K_m), pk(ltkA)> )
    ]->
     [
     St_A_4( A, id, ltkA, pkB, B, x, gy, K_m ),
     Out( <A, sign(<gy, z>, ltkA), senc(<'0', A>, K_m), pk(ltkA)> )
     ]
    variants (modulo AC)
    1. x     = x.11
       z     = 'g'^x.11
    
    2. x     = one
       z     = 'g'
  */

rule (modulo E) B_3_receive:
   [
   St_B_3( B, id, ltkB, pkA, A, gx, y, K_m ),
   In( <A, signature, senc(<'0', A>, K_m), pkA> )
   ]
  --[
  Recv( B, <A, signature, senc(<'0', A>, K_m), pkA> ),
  Equal( verify(signature, <'g'^y, gx>, pkA), true )
  ]->
   [ St_B_4( B, id, ltkB, pkA, A, gx, y, K_m ) ]

  /*
  rule (modulo AC) B_3_receive:
     [
     St_B_3( B, id, ltkB, pkA, A, gx, y, K_m ),
     In( <A, signature, senc(<'0', A>, K_m), pkA> )
     ]
    --[
    Recv( B, <A, signature, senc(<'0', A>, K_m), pkA> ),
    Equal( z, true )
    ]->
     [ St_B_4( B, id, ltkB, pkA, A, gx, y, K_m ) ]
    variants (modulo AC)
    1. gx    = gx.13
       pkA   = pkA.16
       signature
             = signature.17
       y     = y.18
       z     = verify(signature.17, <'g'^y.18, gx.13>, pkA.16)
    
    2. gx    = gx.13
       pkA   = pkA.16
       signature
             = signature.17
       y     = one
       z     = verify(signature.17, <'g', gx.13>, pkA.16)
    
    3. gx    = gx.16
       pkA   = pk(x.27)
       signature
             = sign(<'g', gx.16>, x.27)
       y     = one
       z     = true
    
    4. gx    = gx.17
       pkA   = pk(x.28)
       signature
             = sign(<'g'^y.22, gx.17>, x.28)
       y     = y.22
       z     = true
  */

rule (modulo E) B_4_send:
   [ St_B_4( B, id, ltkB, pkA, A, gx, y, K_m ) ]
  --[
  Send( B,
        <B, sign(<gx, 'g'^y>, ltkB), senc(<'1', B>, K_m), pk(ltkB)>
  ),
  Secret( B, K_m ), Commit( B, A, <'R', 'I', K_m> ), Honest( A ),
  Honest( B )
  ]->
   [
   St_B_5( B, id, ltkB, pkA, A, gx, y, K_m ),
   Out( <B, sign(<gx, 'g'^y>, ltkB), senc(<'1', B>, K_m), pk(ltkB)> )
   ]

  /*
  rule (modulo AC) B_4_send:
     [ St_B_4( B, id, ltkB, pkA, A, gx, y, K_m ) ]
    --[
    Send( B, <B, sign(<gx, z>, ltkB), senc(<'1', B>, K_m), pk(ltkB)> ),
    Secret( B, K_m ), Commit( B, A, <'R', 'I', K_m> ), Honest( A ),
    Honest( B )
    ]->
     [
     St_B_5( B, id, ltkB, pkA, A, gx, y, K_m ),
     Out( <B, sign(<gx, z>, ltkB), senc(<'1', B>, K_m), pk(ltkB)> )
     ]
    variants (modulo AC)
    1. y     = y.11
       z     = 'g'^y.11
    
    2. y     = one
       z     = 'g'
  */

rule (modulo E) A_4_receive:
   [
   St_A_4( A, id, ltkA, pkB, B, x, gy, K_m ),
   In( <B, signature, senc(<'1', B>, K_m), pkB> )
   ]
  --[
  Recv( A, <B, signature, senc(<'1', B>, K_m), pkB> ),
  Equal( verify(signature, <'g'^x, gy>, pkB), true ), Finish( A, B ),
  Secret( A, K_m ), Commit( A, B, <'I', 'R', K_m> ), Honest( A ),
  Honest( B )
  ]->
   [ St_A_5( A, id, ltkA, pkB, B, x, gy, K_m ) ]

  /*
  rule (modulo AC) A_4_receive:
     [
     St_A_4( A, id, ltkA, pkB, B, x, gy, K_m ),
     In( <B, signature, senc(<'1', B>, K_m), pkB> )
     ]
    --[
    Recv( A, <B, signature, senc(<'1', B>, K_m), pkB> ),
    Equal( z, true ), Finish( A, B ), Secret( A, K_m ),
    Commit( A, B, <'I', 'R', K_m> ), Honest( A ), Honest( B )
    ]->
     [ St_A_5( A, id, ltkA, pkB, B, x, gy, K_m ) ]
    variants (modulo AC)
    1. gy    = gy.17
       pkB   = pkB.20
       signature
             = signature.21
       x     = one
       z     = verify(signature.21, <'g', gy.17>, pkB.20)
    
    2. gy    = gy.18
       pkB   = pkB.21
       signature
             = signature.22
       x     = x.23
       z     = verify(signature.22, <'g'^x.23, gy.18>, pkB.21)
    
    3. gy    = gy.36
       pkB   = pk(x.67)
       signature
             = sign(<'g', gy.36>, x.67)
       x     = one
       z     = true
    
    4. gy    = gy.36
       pkB   = pk(x.67)
       signature
             = sign(<'g'^x.41, gy.36>, x.67)
       x     = x.41
       z     = true
  */

restriction Equality:
  "∀ a b #i. (Equal( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

lemma executable:
  exists-trace
  "∃ a b #i.
    ((((Finish( a, b ) @ #i) ∧ (¬(a = b))) ∧
      (∀ c d id1 id2 #j #k.
        ((Create_A( c, id1 ) @ #j) ∧ (Create_A( d, id2 ) @ #k)) ⇒
        (id1 = id2))) ∧
     (∀ e f id3 id4 #l #m.
       ((Create_B( e, id3 ) @ #l) ∧ (Create_B( f, id4 ) @ #m)) ⇒
       (id3 = id4))) ∧
    (¬(∃ X #n. Reveal( X ) @ #n))"
/*
guarded formula characterizing all satisfying traces:
"∃ a b #i.
  (Finish( a, b ) @ #i)
 ∧
  (¬(a = b)) ∧
  (∀ c d id1 id2 #j #k.
    (Create_A( c, id1 ) @ #j) ∧ (Create_A( d, id2 ) @ #k)
   ⇒
    id1 = id2) ∧
  (∀ e f id3 id4 #l #m.
    (Create_B( e, id3 ) @ #l) ∧ (Create_B( f, id4 ) @ #m)
   ⇒
    id3 = id4) ∧
  (∀ X #n. (Reveal( X ) @ #n) ⇒ ⊥)"
*/
simplify
solve( St_A_4( a, id, ltkA, pk(x), b, x.1, gy, K_m ) ▶₀ #i )
  case A_3_send
  solve( !KU( sign(<'g'^~x, gy>, ~ltk.1) ) @ #vk.3 )
    case B_4_send
    solve( !KU( sign(<'g'^~y, 'g'^~x>, ~ltk.2) ) @ #vk.11 )
      case A_3_send
      solve( !KU( senc(<'1', $A.1>, h('g'^(~x*~y))) ) @ #vk.6 )
        case B_4_send
        solve( !KU( pk(~ltk.1) ) @ #vk.9 )
          case B_4_send
          solve( !KU( senc(<'0', $A>, h('g'^(~x*~y))) ) @ #vk.13 )
            case A_3_send
            solve( !KU( pk(~ltk) ) @ #vk.14 )
              case A_3_send
              solve( !KU( 'g'^~x ) @ #vk.15 )
                case A_1_send
                solve( !KU( 'g'^~y ) @ #vk.14 )
                  case B_2_send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_receive
  solve( St_A_4( A, id, ltkA, pk(x), B, x.1, gy, x.2 ) ▶₀ #i )
    case A_3_send
    solve( !KU( sign(<'g'^~x, gy>, ~ltk.1) ) @ #vk.4 )
      case A_3_send
      solve( !KU( h('g'^(~x*~x.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( 'g'^(~x*~x.1) ) @ #vk.10 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    next
      case B_4_send
      solve( !KU( h('g'^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( sign(<'g'^~y, 'g'^~x>, ~ltk.2) ) @ #vk.12 )
          case A_3_send
          solve( !KU( 'g'^(~x*~y) ) @ #vk.17 )
            case A_1_send
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_2_send
            by solve( !KU( ~x ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.20 )
          qed
        next
          case c_sign
          solve( !KU( ~ltk.2 ) @ #vk.19 )
            case Reveal_ltk
            solve( !KU( 'g'^(~x*~y) ) @ #vk.19 )
              case A_1_send
              by solve( !KU( ~y ) @ #vk.20 )
            next
              case B_2_send
              by solve( !KU( ~x ) @ #vk.20 )
            next
              case c_exp
              by solve( !KU( ~x ) @ #vk.22 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltk.1 ) @ #vk.10 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_4_send
  solve( St_B_4( A, id, ltkB, pkA, A.1, gx, y, x ) ▶₀ #i )
    case B_3_receive
    solve( !KU( sign(<'g'^~y, gx>, ~ltk.1) ) @ #vk.4 )
      case A_3_send
      solve( !KU( h('g'^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( 'g'^(~x*~y) ) @ #vk.10 )
          case A_1_send
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_2_send
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    next
      case B_4_send
      solve( !KU( h('g'^(~y*~y.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( sign(<'g'^~y, 'g'^~y.1>, ~ltk.2) ) @ #vk.12 )
          case B_4_send
          by contradiction /* cyclic */
        next
          case c_sign
          solve( !KU( ~ltk.2 ) @ #vk.19 )
            case Reveal_ltk
            solve( !KU( 'g'^(~y*~y.1) ) @ #vk.19 )
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.20 )
            next
              case B_2_send_case_2
              by solve( !KU( ~y.1 ) @ #vk.20 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.22 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltk.1 ) @ #vk.10 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case A_4_receive
  solve( St_A_4( A, id, ltkA, pk(x), B, x.1, gy, x.2 ) ▶₀ #i )
    case A_3_send
    solve( !KU( sign(<'g'^~x, gy>, ~ltk.1) ) @ #vk.4 )
      case A_3_send
      solve( !KU( h('g'^(~x*~x.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( 'g'^(~x*~x.1) ) @ #vk.10 )
          case A_1_send_case_1
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case A_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    next
      case B_4_send
      solve( !KU( h('g'^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( sign(<'g'^~y, 'g'^~x>, ~ltk.2) ) @ #vk.12 )
          case A_3_send
          solve( !KU( 'g'^(~x*~y) ) @ #vk.17 )
            case A_1_send
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case B_2_send
            by solve( !KU( ~x ) @ #vk.18 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.20 )
          qed
        next
          case c_sign
          solve( !KU( ~ltk.2 ) @ #vk.19 )
            case Reveal_ltk
            solve( !KU( 'g'^(~x*~y) ) @ #vk.19 )
              case A_1_send
              by solve( !KU( ~y ) @ #vk.20 )
            next
              case B_2_send
              by solve( !KU( ~x ) @ #vk.20 )
            next
              case c_exp
              by solve( !KU( ~x ) @ #vk.22 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltk.1 ) @ #vk.10 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case B_4_send
  solve( St_B_4( A, id, ltkB, pkA, A.1, gx, y, x ) ▶₀ #i )
    case B_3_receive
    solve( !KU( sign(<'g'^~y, gx>, ~ltk.1) ) @ #vk.4 )
      case A_3_send
      solve( !KU( h('g'^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( 'g'^(~x*~y) ) @ #vk.10 )
          case A_1_send
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case B_2_send
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case c_exp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    next
      case B_4_send
      solve( !KU( h('g'^(~y*~y.1)) ) @ #vk.1 )
        case c_h
        solve( !KU( sign(<'g'^~y, 'g'^~y.1>, ~ltk.2) ) @ #vk.12 )
          case B_4_send
          by contradiction /* cyclic */
        next
          case c_sign
          solve( !KU( ~ltk.2 ) @ #vk.19 )
            case Reveal_ltk
            solve( !KU( 'g'^(~y*~y.1) ) @ #vk.19 )
              case B_2_send_case_1
              by solve( !KU( ~y ) @ #vk.20 )
            next
              case B_2_send_case_2
              by solve( !KU( ~y.1 ) @ #vk.20 )
            next
              case c_exp
              by solve( !KU( ~y ) @ #vk.22 )
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltk.1 ) @ #vk.10 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'I', 'R', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case A_4_receive
  solve( St_A_4( a, id, ltkA, pk(x), b, x.1, gy, t ) ▶₀ #i )
    case A_3_send
    solve( !KU( sign(<'g'^~x, gy>, ~ltk.1) ) @ #vk.3 )
      case A_3_send
      solve( !KU( senc(<'1', $A.1>, h('g'^(~x*~x.1))) ) @ #vk.5 )
        case B_4_send
        solve( splitEqs(2) )
          case split
          solve( !KU( sign(<'g'^~y, 'g'^(~x*~x.1*inv(~y))>, ~ltk.4)
                 ) @ #vk.12 )
            case c_sign
            solve( !KU( ~ltk.4 ) @ #vk.18 )
              case Reveal_ltk
              solve( !KU( 'g'^(~x*~x.1*inv(~y)) ) @ #vk.17 )
                case A_1_send_case_1
                by solve( !KU( ~x ) @ #vk.21 )
              next
                case A_1_send_case_2
                by solve( !KU( ~x.1 ) @ #vk.21 )
              next
                case c_exp
                by solve( !KU( ~x ) @ #vk.22 )
              qed
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( h('g'^(~x*~x.1)) ) @ #vk.10 )
          case c_h
          solve( !KU( 'g'^(~x*~x.1) ) @ #vk.12 )
            case A_1_send_case_1
            by solve( !KU( ~x ) @ #vk.13 )
          next
            case A_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.13 )
          next
            case c_exp
            by solve( !KU( ~x ) @ #vk.15 )
          qed
        qed
      qed
    next
      case B_4_send
      solve( !KU( sign(<'g'^~y, 'g'^~x>, ~ltk.2) ) @ #vk.11 )
        case A_3_send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'I', 'R', h('g'^(~x*~y))> ) @ #i2 )
            case A_4_receive
            solve( St_A_4( a2, id.1, ltkA, pk(x.1), b2, x.2, gy, h('g'^(~x*~y))
                   ) ▶₀ #i2 )
              case A_3_send
              solve( splitEqs(3) )
                case split_case_1
                by contradiction /* cyclic */
              next
                case split_case_2
                solve( !KU( sign(<'g'^~x.1, 'g'^(~x*~y*inv(~x.1))>, ~ltk.3)
                       ) @ #vk.19 )
                  case c_sign
                  solve( !KU( ~ltk.3 ) @ #vk.25 )
                    case Reveal_ltk
                    solve( !KU( 'g'^(~x*~y*inv(~x.1)) ) @ #vk.24 )
                      case A_1_send
                      by solve( !KU( ~y ) @ #vk.28 )
                    next
                      case B_2_send
                      by solve( !KU( ~x ) @ #vk.28 )
                    next
                      case c_exp
                      by solve( !KU( ~x ) @ #vk.29 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'I', 'R', h('g'^(~x*~y))> ) @ #i2 )
            case A_4_receive
            solve( St_A_4( a2, id.1, ltkA, pk(x.1), b2, x.2, gy, h('g'^(~x*~y))
                   ) ▶₀ #i2 )
              case A_3_send
              solve( splitEqs(3) )
                case split_case_1
                by contradiction /* cyclic */
              next
                case split_case_2
                solve( !KU( sign(<'g'^~x.1, 'g'^(~x*~y*inv(~x.1))>, ~ltk.3)
                       ) @ #vk.19 )
                  case c_sign
                  solve( !KU( ~ltk.3 ) @ #vk.25 )
                    case Reveal_ltk
                    solve( !KU( 'g'^(~x*~y*inv(~x.1)) ) @ #vk.24 )
                      case A_1_send
                      by solve( !KU( ~y ) @ #vk.28 )
                    next
                      case B_2_send
                      by solve( !KU( ~x ) @ #vk.28 )
                    next
                      case c_exp
                      by solve( !KU( ~x ) @ #vk.29 )
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_sign
        solve( !KU( ~ltk.2 ) @ #vk.17 )
          case Reveal_ltk
          solve( !KU( senc(<'0', $A.2>, h('g'^(~x*~y))) ) @ #vk.15 )
            case A_3_send
            solve( splitEqs(2) )
              case split_case_1
              by contradiction /* from formulas */
            next
              case split_case_2
              solve( !KU( 'g'^(~x*~y*inv(~x.1)) ) @ #vk.18 )
                case A_1_send
                by solve( !KU( ~y ) @ #vk.20 )
              next
                case B_2_send
                by solve( !KU( ~x ) @ #vk.20 )
              next
                case c_exp
                by solve( !KU( ~x ) @ #vk.21 )
              qed
            qed
          next
            case c_senc
            solve( !KU( h('g'^(~x*~y)) ) @ #vk.19 )
              case c_h
              solve( !KU( 'g'^(~x*~y) ) @ #vk.21 )
                case A_1_send
                by solve( !KU( ~y ) @ #vk.22 )
              next
                case B_2_send
                by solve( !KU( ~x ) @ #vk.22 )
              next
                case c_exp
                by solve( !KU( ~x ) @ #vk.24 )
              qed
            qed
          qed
        qed
      qed
    next
      case c_sign
      solve( !KU( ~ltk.1 ) @ #vk.9 )
        case Reveal_ltk
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       (Running( b, a, <'R', 'I', t> ) @ #j) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ∃ a2 b2 #i2.
     (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case B_4_send
  solve( St_B_4( a, id, ltkB, pkA, b, gx, y, t ) ▶₀ #i )
    case B_3_receive
    solve( !KU( sign(<'g'^~y, gx>, ~ltk.1) ) @ #vk.3 )
      case A_3_send
      solve( !KU( senc(<'0', $A.1>, h('g'^(~x*~y))) ) @ #vk.5 )
        case A_3_send
        solve( splitEqs(2) )
          case split_case_1
          solve( !KU( pk(~ltk.1) ) @ #vk.6 )
            case A_3_send
            solve( splitEqs(4) )
              case split_case_1
              solve( !KU( 'g'^~y ) @ #vk.8 )
                case B_2_send
                solve( !KU( 'g'^~x ) @ #vk.8 )
                  case A_1_send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end